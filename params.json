{"name":"Angular-Markdown-Editable","tagline":"Markdown is awesome. ContentEditable is awesome. How about we display the parsed markdown... and let users edit the markdown text on focus?","body":"### Markdown Is The Way of the Future\r\n\r\nMarkdown is the easiest way to accept user-generated formatting. You don't want your users inputting html do you? Of course not. That's a pain to sanitize, and folks hate writing it. \r\n\r\nMarkdown is the way of the future... the way of the future... [the way of the future](http://youtu.be/4_Pbx9mvWPY)...\r\n\r\n### ContentEditable Is Clean & Easy\r\n\r\nTextarea and Input elements are pain in the neck. They take up valuable screen real estate, and they're extra work to format. Editing content in place with ```contenteditable=true``` is a much nicer way to accept user input. \r\n\r\nContenteditable is [clean & easy](https://www.youtube.com/watch?v=1UxHZA4EHC8).\r\n\r\n### Put 'Em All Together...\r\n\r\n... and you get contenteditable elements that display plaintext when editing, but are parsed as markdown as soon as the user blurs away from the element.\r\n\r\n### At Least In Theory\r\n\r\nThis handy trick is a pain to implement, because the Angular directive that makes it possible does not have clean access to the element's scope. This leads to a bit of hackery to end-run the issue. It takes a few tries to set the correct scope values using the link functions ```model``` input. And there's a dirty little ```eval()``` statement in there somewhere. \r\n\r\nThere's also a reliance on a the ```value``` attribute as a method of stashing the unparsed markdown text for other directives to access before the scope changes are fully propagated. There are timing issues with multiple directives on a single element... all trying to read and write to scope at the same time. One can only use ```$timeout``` and ```scope.$apply``` so many times before things get ridiculous.\r\n\r\n### Installation\r\n\r\nThis part is easy. Run ```bower install --save angular-markdown-editable```, and make sure that you're referencing both ```bower_components/showdown/src/showdown.js``` and ```bower_components/angular-markdown-editable/angular-markdown-editable.js``` in your ```index.html``` file.\r\n\r\nNext, require ```angular-markdown-editable``` in your application module definition.\r\n\r\n```\r\nangular.module('exampleApp', ['angular-markdown-editable']);\r\n```\r\n\r\nFinally, use the directive like this...\r\n\r\n```\r\n<div id=\"markdown-area\" markdown-editable ng-model=\"markdownText\" contenteditable=\"true\">{{ markdownText }}</div>\r\n```\r\n\r\n### Extra features\r\n\r\nI ripped most of this off from @Morgul, so check out his [angular-markdown](https://bitbucket.org/morgul/angular-markdown/src/2f561047f55d?at=default) BitBucket repo for goodies on how to use extensions and how to strip leading white space.\r\n\r\n***Hint hint:*** It looks like this:\r\n\r\n```\r\n<div id=\"markdown-area\" markdown-editable ng-model=\"markdownText\" contenteditable=\"true\" strip=\"true\" extensions=\"github\">{{ markdownText }}</div>\r\n```\r\n\r\n### Authors and Contributors\r\nThis has been developed by Chris Esplin (@deltaepsilon), leveraging the work of John Lindquist (@johnlindquist), Jonathan Rowny (@jrowny) and Christopher S. Case (@Morgul).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}